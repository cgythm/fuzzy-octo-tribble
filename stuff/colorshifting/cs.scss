$dur: 3s;

@import "../../stylesheets/_lib.scss";

//in the future, i gotta make a system to create breakpoint splitting
$okayish-size: make-breakpoint($min: 601px);
$smallish-size: make-breakpoint($min: 401px, $max: 600px);
$smallest-size: make-breakpoint($max: 400px);

//nesting body within html is useful when I gotta append class identifiers set by modernizr
//to make this selector applicable
html{
    body{
        position: relative;

        -webkit-transition: background-color;
        -webkit-transition-duration: $dur;

        transition: background-color;
        transition-duration: $dur;


        width: 100%;
        height: 100%;

        width: 100vw;
        height: 100vh;
        margin: 0;
        padding: 0;

        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        color: transparentize(white, 0.5);

        $base-font-size: 32pt;

        @include for-breakpoint($smallest-size){
            font-size: $base-font-size/2;

        }

        @include for-breakpoint($smallish-size){
            font-size: $base-font-size*0.75;
        }

        @include for-breakpoint($okayish-size){
            font-size: $base-font-size;
        }

    }
}

article#container{
    position: relative;
    width: 100%;
    height: 100%;
}

article#insider{
    position: absolute;
    width: 100%;
    text-align: center;
    transform: translate(0%, -50%);
    top: 50%;
}

span#toggle{
    padding-left: 0.2em;
}

a{

    &:hover{
        @extend %simple-a-underlined;
    }

    &, &:visited, &:active{
        @extend %simple-a;
    }
}

%simple-a{
    color: transparentize(white, 0.5);
    text-decoration: none;
}

%simple-a-underlined{
    color: transparentize(white, 0.5);
    text-decoration: underline;
}


nav{
    position: absolute;
    top: 0px;
    right: 0px;
    left: 0px;

    @include for-breakpoint($smallest-size){

    }

    @include for-breakpoint($smallish-size){

    }

    @include for-breakpoint($okayish-size){

    }

}



body{
    //this produces the color ranges we randomy pick from.
    //in this, the hue is divided into 30 steps (so we get to pick from 30 colors)
    //and the saturation and lightness is kept constant.
    $step: 30;
    $hue-step: 360deg / $step;
    $sat: 100%;
    $light: 50%;

    //iterates through the steps and make the styles
    @for $i from 1 to ($step + 1){
        &.a-#{$i}{
            background-color: hsl($hue-step * $i, $sat, $light)
        }
    }
}

